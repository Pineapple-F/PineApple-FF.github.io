<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>单片机——蓝桥杯备赛</title>
      <link href="/2024/02/23/%E5%8D%95%E7%89%87%E6%9C%BA%E2%80%94%E2%80%94%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%A4%87%E8%B5%9B/"/>
      <url>/2024/02/23/%E5%8D%95%E7%89%87%E6%9C%BA%E2%80%94%E2%80%94%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%A4%87%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<p>蓝桥杯比赛指定单片机跟51单片机差不多，可以通过淘宝国信长天购买。</p><p>本次学习跟着<a href="https://www.bilibili.com/video/BV1Bt41187hw/?vd_source=59e4e13f0e1002ef3a96e7a6170a57aa">b站小蜜蜂老师的视频</a></p><p>使用的相关软件为 <code>keil4</code> 和 <code>STC-ISP</code></p><h1 id="相关软件使用"><a href="#相关软件使用" class="headerlink" title="相关软件使用"></a>相关软件使用</h1><p><code>keil4</code>作用是编写代码和编译</p><p><code>STC-ISP</code>的作用是将<code>keil4</code>得到的16进制码下载到我们的板子上</p><h2 id="keil4使用"><a href="#keil4使用" class="headerlink" title="keil4使用"></a>keil4使用</h2><ol><li>选一个位置存代码，新建文件夹</li><li>打开<code>keil4</code>，顶栏选择<code>Project</code>，再选择第一个<code>New Project</code>，找到刚才建的文件夹，自己写一个项目名，然后在<code>Atmel</code>中找到<code>AT89C52</code></li><li>新建c文件，保存在刚才建的项目文件夹中</li><li>在左侧项目栏中右键项目文件夹，找到<code>add</code>什么那个，然后把建的c文件加进去</li><li>改成16进制输出</li><li>写代码，编译</li></ol><h2 id="STC-ISP使用"><a href="#STC-ISP使用" class="headerlink" title="STC-ISP使用"></a>STC-ISP使用</h2><ol><li>点打开程序文件，打开要下载到板子上的.hex文件</li><li>点下载&#x2F;编程</li><li>按板子上的下载按钮完成下载</li></ol><hr><p>下面我们实现各个元件的控制</p><h1 id="各元件控制"><a href="#各元件控制" class="headerlink" title="各元件控制"></a>各元件控制</h1><h2 id="LED指示灯的控制"><a href="#LED指示灯的控制" class="headerlink" title="LED指示灯的控制"></a>LED指示灯的控制</h2><p>在蓝桥杯指定单片机上已经有了诸多外设，传感器等等，板子的内部电路固定。所以需要通过特定的电路来对电路原件做相应的控制，而不像大一的电子设计课一样需要自己连线，可以自己定每条线插在哪个口。</p><h3 id="LED电路"><a href="#LED电路" class="headerlink" title="LED电路"></a>LED电路</h3><p>板子上共有8个我们需要控制的LED，由一个三八译码器74HC138，一个锁存器74HC573，和或非门构成，而我们就需要通过改变这几个原件的输入输出从而控制LED亮灭，那我们一一来看一看电路图。</p><ul><li><strong>三八译码器（74HC138）</strong></li></ul><img src="/image/${fiilename}/ca6b90b2e3077bcbd1fb46538f3fa3b.png" alt="ca6b90b2e3077bcbd1fb46538f3fa3b" style="zoom:150%;" /><p>​简单的三八译码器，有三个输入控制对应的八个输出，符合二进制规律</p><p>​注意的是，该三八译码器八路输出中只有一路是Low，其他都是High</p><p>​P25, P26, P27连接HC138的 A, B, C输入端，分别对应二进制的第0位，第1位和第2位</p><p>​本次控制LED我们需要让Y4为Low，所以我们要让CBA为100时，此时二进制对应为4即Y4为Low，其余输出均为High</p><ul><li><strong>锁存器（74HC573）</strong></li></ul><p><img src="/image/$%7Bfiilename%7D/e2489def9312e404eaac29046a99369.png" alt="e2489def9312e404eaac29046a99369"></p><p>​有用的只有图中Y4C输入：</p><p>​Y4C为High，那么八个输出和八个输入保持一致（输出跟着输入随时变）</p><p>​Y4C为Low，那么八个输出并不改变（输出不跟着输入变，还是原来的输出值）</p><p>​那么Y4C是啥呢？如下：</p><img src="/image/${fiilename}/dbc69a7aff4b84f57d8a8c082498a4c.png" alt="dbc69a7aff4b84f57d8a8c082498a4c" style="zoom:200%;" /><p>​图有点糊，但没啥事</p><p>​WR一般都是0，Y4和Y4C相反</p><p>​所以在上面我们让CBA是100，Y4为Low，那么Y4C就是High，此时我们就可以顺利通过P0^1到8来控制八个小灯泡了，0为亮，1为灭，即P0 &#x3D; 0x00代表8个小灯泡全亮，P0 &#x3D; 0xff代表8个小灯泡全灭。</p><p>至此，有关LED的电路部分介绍完毕，我们开始进行代码的编写。</p><h3 id="LED代码"><a href="#LED代码" class="headerlink" title="LED代码"></a>LED代码</h3><p>整个51单片机编程使用的都是C语言，很好上手</p><ul><li><p>引入头文件</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;reg52.h&quot;</span></span></span><br></pre></td></tr></table></figure></li></ul><p>​引入此头文件之后我们可以用特定字母代表指定引脚，比如P2^5代表电路图中的P25</p><ul><li><p>对应引脚定义</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sbit HC138_A = P2^<span class="number">5</span>;</span><br><span class="line">sbit HC138_B = P2^<span class="number">6</span>;</span><br><span class="line">sbit HC138_C = P2^<span class="number">7</span>;</span><br></pre></td></tr></table></figure></li><li><p>延迟函数</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Delay</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> t)</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(t--);</span><br><span class="line"><span class="keyword">while</span>(t--);</span><br><span class="line"><span class="keyword">while</span>(t--);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>​每个延迟函数都这么写就行</p><ul><li><p><strong>LED控制函数</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LEDRunning</span><span class="params">()</span>&#123;   </span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line"><span class="comment">//Y4 = 0</span></span><br><span class="line">HC138_C = <span class="number">1</span>;</span><br><span class="line">HC138_B = <span class="number">0</span>;</span><br><span class="line">HC138_A = <span class="number">0</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//跑马灯</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">8</span>; i++)&#123;</span><br><span class="line">P0 = <span class="number">0xff</span> &lt;&lt; i;</span><br><span class="line">Delay(<span class="number">60000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">8</span>; i++)&#123;</span><br><span class="line">P0 = ~(<span class="number">0xff</span> &lt;&lt; i);</span><br><span class="line">Delay(<span class="number">60000</span>);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//8个LED整体闪三下</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">P0 = <span class="number">0x00</span>;</span><br><span class="line">Delay(<span class="number">60000</span>);</span><br><span class="line">P0 = <span class="number">0xff</span>;</span><br><span class="line">Delay(<span class="number">60000</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>主函数</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)&#123;</span><br><span class="line">LEDRunning();</span><br><span class="line">&#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简简单单主函数，不断循环LED控制函数</p></li></ul><p>编写完代码下载到板子上，进行验证以及修改</p><p>至此，我们就可以顺利控制LED了</p><h2 id="继电器和蜂鸣器"><a href="#继电器和蜂鸣器" class="headerlink" title="继电器和蜂鸣器"></a>继电器和蜂鸣器</h2><h3 id="电路部分"><a href="#电路部分" class="headerlink" title="电路部分"></a>电路部分</h3><p><img src="/image/$%7Bfiilename%7D/055e11268c30d61c5937a455b638d2d.png" alt="055e11268c30d61c5937a455b638d2d"></p><p>如图，<code>N_RELAY</code>连的是继电器，<code>N_BUZZ</code>连的是蜂鸣器，相对应的输入分别是P04和P06，输入为High时工作。</p><p>和上面LED不同，与锁存器相连的是Y5C，所以要控制继电器和蜂鸣器，我们需要使74HC138的输出Y5为Low，其他输出为High，即CBA为101；</p><h3 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h3><ul><li><p>代码优化</p><p>由于本次涉及到了Y5C，我们可以写一个函数来决定HC138的输出</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">InitHC138</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> n)</span>&#123;</span><br><span class="line"><span class="keyword">switch</span>(n)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">HC138_C = <span class="number">1</span>;</span><br><span class="line">HC138_B = <span class="number">0</span>;</span><br><span class="line">HC138_A = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">HC138_C = <span class="number">1</span>;</span><br><span class="line">HC138_B = <span class="number">0</span>;</span><br><span class="line">HC138_A = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">HC138_C = <span class="number">1</span>;</span><br><span class="line">HC138_B = <span class="number">1</span>;</span><br><span class="line">HC138_A = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">HC138_C = <span class="number">1</span>;</span><br><span class="line">HC138_B = <span class="number">1</span>;</span><br><span class="line">HC138_A = <span class="number">1</span>; </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这个函数，我们只需一个数字便可以得到我们想要的输出从而选择控制哪部分电路</p></li><li><p>控制继电器和蜂鸣器</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//继电器吸合</span></span><br><span class="line">InitHC138(<span class="number">5</span>);</span><br><span class="line">P0 = <span class="number">0x10</span>;</span><br><span class="line">Delay(<span class="number">60000</span>);</span><br><span class="line">P0 = <span class="number">0x00</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//蜂鸣器叫一下</span></span><br><span class="line">InitHC138(<span class="number">5</span>);</span><br><span class="line">P0 = <span class="number">0x40</span>;</span><br><span class="line">Delay(<span class="number">60000</span>);</span><br><span class="line">P0 = <span class="number">0x00</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="共阳数码管"><a href="#共阳数码管" class="headerlink" title="共阳数码管"></a>共阳数码管</h2><h3 id="电路部分-1"><a href="#电路部分-1" class="headerlink" title="电路部分"></a>电路部分</h3><p><img src="/image/$%7Bfiilename%7D/image-20240225160400292.png" alt="image-20240225160400292"></p><p>如图，Y6C控制数码管位置，Y7C控制数码管内容</p><p>Y6C: P0^0-7与com0-7相连，控制8个数码管的明灭</p><p>Y7C: 每个数字或字母由组成数码管的8个LED决定，对应如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> SMG_duanma[<span class="number">18</span>] = &#123;<span class="number">0xc0</span>, <span class="number">0xf9</span>, <span class="number">0xa4</span>, <span class="number">0xb0</span>, <span class="number">0x99</span>,   <span class="number">0x92</span>, <span class="number">0x82</span>, <span class="number">0xf8</span>, <span class="number">0x80</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0xc6</span>, <span class="number">0xc0</span>, <span class="number">0x86</span>, <span class="number">0x8e</span>,</span><br><span class="line">    <span class="number">0xbf</span>, <span class="number">0x7f</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="静态显示"><a href="#静态显示" class="headerlink" title="静态显示"></a>静态显示</h3><p>由于控制数码管内容的只有P0^1-7，所以在静态显示中，如果有多个数码管同时亮，则显示的内容一致</p><ul><li><p>数码管位置及内容控制函数</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">ShowSMG_Bit</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> dat, <span class="type">unsigned</span> pos)</span>&#123;</span><br><span class="line"> <span class="comment">//数码管位置</span></span><br><span class="line">InitHC138(<span class="number">6</span>);</span><br><span class="line">P0 = <span class="number">0x01</span> &lt;&lt; pos;</span><br><span class="line"><span class="comment">//数码管内容</span></span><br><span class="line">InitHC138(<span class="number">7</span>);</span><br><span class="line">P0 = SMG_duanma[dat]; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>8个数码管依次亮</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SMG_Static</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)&#123;</span><br><span class="line"> ShowSMG_Bit(i,i);  </span><br><span class="line">Delay(<span class="number">50000</span>);</span><br><span class="line">Delay(<span class="number">50000</span>);</span><br><span class="line">Delay(<span class="number">50000</span>);</span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="动态显示"><a href="#动态显示" class="headerlink" title="动态显示"></a>动态显示</h3><p>动态显示是根据人眼的<strong>视觉暂留现象</strong>以及发光二极管的<strong>余晖效应</strong>，只要8个LED闪的够快，那么在看起来就是一直亮的。</p><p>动态显示可以大大节省I&#x2F;O端口，而且功耗低</p><ul><li><p>动态显示代码</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SMG_Dynamic</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> j = <span class="number">0</span>;   </span><br><span class="line">ShowSMG_Bit(<span class="number">1</span>,<span class="number">1</span>);  </span><br><span class="line">Delay(<span class="number">500</span>);  </span><br><span class="line">    <span class="comment">//延迟也不能太短，LED点亮也需要时间，太短会让数码管看起来很暗</span></span><br><span class="line">ShowSMG_Bit(<span class="number">1</span>,<span class="number">1</span>);  </span><br><span class="line">Delay(<span class="number">500</span>); </span><br><span class="line">ShowSMG_Bit(<span class="number">2</span>,<span class="number">2</span>); </span><br><span class="line">Delay(<span class="number">500</span>);</span><br><span class="line">ShowSMG_Bit(<span class="number">3</span>,<span class="number">3</span>); </span><br><span class="line">Delay(<span class="number">500</span>);</span><br><span class="line">ShowSMG_Bit(<span class="number">4</span>,<span class="number">4</span>); </span><br><span class="line">Delay(<span class="number">500</span>);</span><br><span class="line">ShowSMG_Bit(<span class="number">5</span>,<span class="number">5</span>); </span><br><span class="line">Delay(<span class="number">500</span>);</span><br><span class="line">ShowSMG_Bit(<span class="number">6</span>,<span class="number">6</span>); </span><br><span class="line">Delay(<span class="number">500</span>);</span><br><span class="line">ShowSMG_Bit(<span class="number">7</span>,<span class="number">7</span>); </span><br><span class="line">Delay(<span class="number">500</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>动态显示的延迟函数</p><p>动态显示的延迟函数不能像之前的一样，而应该在延迟函数的<code>while</code>函数中一直进行动态显示</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Delay_Dynamic</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> t)</span>&#123;</span><br><span class="line"> <span class="keyword">while</span>(t--)&#123;</span><br><span class="line"> SMG_Dynamic();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>主函数</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">SMG_Static();</span><br><span class="line">SMG_Dynamic();</span><br><span class="line">Delay_Dynamic(<span class="number">100</span>);   </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>​这样我们就可以随意控制8个数码管显示任何数字以及实现我们想要完成的变化了</p>]]></content>
      
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于logisim的mips单周期处理器设计</title>
      <link href="/2023/11/02/hello-world/"/>
      <url>/2023/11/02/hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="基于logisim的mips单周期处理器设计"><a href="#基于logisim的mips单周期处理器设计" class="headerlink" title="基于logisim的mips单周期处理器设计"></a>基于logisim的mips单周期处理器设计</h1><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><h4 id="一、CPU功能"><a href="#一、CPU功能" class="headerlink" title="一、CPU功能"></a>一、CPU功能</h4><p>cpu功能即为控制指令执行，包含对指令的四种操作：</p><ul><li>取数:从主存中取出数据并送至某个寄存器中</li><li>存数：将某个寄存器中的值存入主存</li><li>传送：将某个寄存器中的数据传送至ALU或另一个寄存器</li><li>运算：ALU进行运算，结果保存至某个寄存器中</li></ul><p>cpu设计一般思路：</p><ol><li>分析指令系统需求</li><li>分类型依次构建数据通路（R型，I型，J型）</li><li>设计控制器  </li><li>合并完成</li></ol><hr><h4 id="二、单周期cpu设计"><a href="#二、单周期cpu设计" class="headerlink" title="二、单周期cpu设计"></a>二、单周期cpu设计</h4><p><strong>1. 本次设计需支持的指令：</strong></p><ul><li>R型：<br>add, sub</li><li>I型：<br> ori, lw, sw, lui, beq,</li><li>空指令：<br>nop<hr></li></ul><p><strong>2. 模块需求：</strong></p><ul><li>IFU（取指令单元）包含：<ul><li>PC（程序计数器）：寄存器实现，起始地址：0x00003000。</li><li>IM（指令存储器）：ROM实现，12位地址，32位位宽，内部起始地址从零开始</li></ul></li><li>GRF（寄存器堆）包含：<ul><li>32个32位寄存器</li></ul></li><li>ALU（算术逻辑单元）：<ul><li>进行各种运算</li></ul></li><li>DM（数据存储器）：<ul><li>RAM实现：32位位宽</li></ul></li><li>Controller（控制器）：<ul><li>输入指令的OP（指令前六位）以及Func（R型指令后六位）</li><li>输出各个其他的模块的使能信号</li></ul></li></ul><hr><p><strong>3. 模块设计：</strong></p><ul><li><p><strong>IFU:</strong></p><img src="cpuimage/IFU.png" alt="IFU" style="zoom: 60%;" />功能描述：<ul><li>PC每次右移两位后使用Bit Extender变为12位从IM(ROM)中取出指令</li><li>取指令：instr &#x3D; IM[PC]</li><li>PC每次取指令完成后自增：PC &lt;&#x3D; PC + 4</li></ul></li><li><p><strong>GRF:</strong></p><ul><li>在P0课下的GRF上稍作调整，外观及引脚调整为<img src="cpuimage/GRF1.png" alt="IFU" style="zoom:50%;" /></li><li>GRF内部基本由三部分组成：</li></ul><ol><li>通过Rs,Rt地址利用多路选择器找到对应寄存器并输出其中存的数据R1,R2<img src="cpuimage/GRF2.png" alt="IFU" style="zoom: 33%;" /></li><li>通过RegAddr利用解码器找到需要修改的寄存器<img src="cpuimage/GRF3.png" alt="IFU" style="zoom: 33%;" /></li><li>通过各个使能信号决定是否修改RegAddr对应的寄存器的值（并将32个标签与对应寄存器相连）<img src="image-4.png" alt="Alt text" style="zoom: 40%;" /></li></ol></li><li><p><strong>ALU:</strong></p><ul><li>根据本次设计需支持的8个指令，进行ALU各分支设计：<ul><li>add, lw, sw : 加法</li><li>sub : 减法</li><li>ori : 或运算</li><li>lui : 移位</li><li>beq : 判断Rs与Rt是否相等</li></ul></li><li>设计图如下：<img src="image.png" alt="Alt text" style="zoom: 40%;" /></li><li>通过Controller确定的ALUOp决定输出分支</li></ul></li><li><p><strong>Controller:</strong><br>controller 由两部分组成：</p><ol><li>通过Op确定是哪条指令，并连接对应标签（其中R型指令Op相同，需根据Func进一步判断） <img src="image-3.png" alt="Alt text" style="zoom: 50%;" /> 该部分我没有采用P3教程中的方法，而是利用Comparater直接将Op与常量比较看属于哪条指令</li><li>通过各指令的数据通路，决定Controller的输出使能信号的高低电平<br> 本次设计的Controller一共有8个输出使能信号，分别是： <img src="image-5.png" alt="Alt text" style="zoom: 50%;" /></li></ol><ul><li>branch : beq 时置1，其余均置0</li><li>MemtoReg : 选择 ALU运算结果或从DM中读出数据 存至GRF</li><li>MemWrite : DM读数据（lw）</li><li>MemRead : DM写数据（sw）</li><li>ALUOp : 决定ALU模块输出的分支</li><li>ALUSrc : 决定ALU输入是 Rt 对应数据还是 imm 立即数（R型指令置1，I型指令置1）</li><li>RegWrite : 是否改变GRF中寄存器的值</li><li>RegDst : 选择进入GRF的RegAddr是 Rt 还是 Rd（R型指令有Rd，I型指令无Rd）<img src="image-7.png" alt="Alt text" style="zoom:40%;" /></li></ul></li><li><p><strong>DM:</strong></p><ul><li>RAM实现，具有读写功能  <img src="image-8.png" alt="Alt text" style="zoom:50%;" />    **4. 数据通路：**将上述各模块相连，并将各个指令依次构建数据通路，详见PPT</li></ul></li></ul><hr><p>​<strong>5. 数据通路合并，设计完成：</strong></p><p><img src="/image-6.png" alt="Alt text"></p><hr><h2 id="思考题："><a href="#思考题：" class="headerlink" title="思考题："></a>思考题：</h2><p>  <strong>1. 上面我们介绍了通过 FSM 理解单周期 CPU 的基本方法。请大家指出单周期 CPU 所用到的模块中，哪些发挥状态存储功能，哪些发挥状态转移功能。</strong><br>   答：状态存储功能模块：GRF、DM；状态转移功能模块：IFU、ALU、Controller<br>  <strong>2. 现在我们的模块中 IM 使用 ROM， DM 使用 RAM， GRF 使用 Register，这种做法合理吗？ 请给出分析，若有改进意见也请一并给出。</strong><br>   答：合理<br>   IM 使用 ROM：IM 存储指令代码和常量数据，ROM 能够提供非易失性存储和快速的读取速度，因此适合用于存储指令和常量数据但是，如果需要修改指令或者增加新的指令，需要重新烧录或更换 ROM 芯片，不够灵活。<br>   DM 使用 RAM：DM 存储程序运行时的数据，RAM 提供了易写易读的特性，适合作为数据存储器。但是，RAM 是易失性存储，断电后数据会丢失。此外，RAM 的速度相对较慢，访问时间比寄存器长。改进的方法可以考虑使用带备份电池的非易失性存储器，比如 SRAM 或者 FRAM，能够保留数据并提供较快的访问速度。<br>   GRF 使用 Register：GRF 存储寄存器的值，这些寄存器直接用于 CPU 运算操作。寄存器提供了最快的访问速度和多端口的并行读写能力。<br>  <strong>3. 在上述提示的模块之外，你是否在实际实现时设计了其他的模块？如果是的话，请给出介绍和设计的思路。</strong><br>  答：暂时没有设计其他的模块<br>  <strong>4. 事实上，实现 nop 空指令，我们并不需要将它加入控制信号真值表，为什么？</strong><br>  答：nop在CPU运行周期内不做任何行为，因此将所有控制信号置低电平即可确保CPU的各个部件不受任何影响，相当于执行了一个没有行为的周期，也即执行了nop空指令。<br>  <strong>5. 阅读 Pre 的 “MIPS 指令集及汇编语言” 一节中给出的测试样例，评价其强度（可从各个指令的覆盖情况，单一指令各种行为的覆盖情况等方面分析），并指出具体的不足之处。</strong><br>  <img src="image-9.png" alt="Alt text" style="zoom:50%;" /><br>  答： 该测试指令强度较弱<br>   1.同一种指令位置过于集中，应该将不同指令穿插运行<br>   2.从单一指令的覆盖情况来看，指令行为比较一致，同时也没有进行不同类型数据的测试以及边缘数据的测试。<br>   3.同时指令总数较少，不一定可以反应出cpu的问题所在</p>]]></content>
      
      
      
        <tags>
            
            <tag> co </tag>
            
            <tag> Logisim </tag>
            
            <tag> MIPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2023/11/02/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/11/02/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
